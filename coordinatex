#!/bin/sh

# Copyright 2011 Daniel Thau. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY <COPYRIGHT HOLDER> ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#  CoordinaTeX
# ==============================================================================

# CoordinaTeX is a script which will automate compilation of a TeX file and
# forward searches (ie, having the output reader jump to the editor's cursor
# position).  The effect should be to get a somewhat-live update of the TeX
# document as it is being created without having to manually make any requests
# for compilation or forward search syncing - just type your document and watch
# the reader update live and follow your cursor.

VERSION="0.2.1"

#  Functions
# ==============================================================================


# Print help information and exit
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

print_help() {
	echo "CoordinaTeX $VERSION"
	echo ""
	echo "usage: coordinatex [arguments]"
	echo ""
	echo "Arguments"
	echo "  -h              Print this dialogue"
	echo "  -i <filename>   TeX file to be edited and compiled"
	echo "  -o <filename>   Output file name"
	echo "  -e <editor>     Program to edit TeX file"
	echo "  -r <reader>     Program to view compiled DVI or PDF"
	echo "  -v <vimserver>  Vim's servername"
	echo "  -c <compiler>   Name of compiler to use - pdftex, latex, etc"
	echo "  -n <seconds>    Time to wait between checking for need to compile"
	echo "  -p <seconds>    Time to wait between polling for editor cursor"
	echo "  -z              When compile error, print error in reader"
	echo ""
	echo "If a required argument is left out, CoordinaTeX may pick it up from an"
	echo "environmental variable (such as EDITOR) or try to guess the value by"
	echo "looking at the local files and processes."
	exit
}


#  Quit CoordinaTeX cleanly, killing backgrounded functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

quit() {
	echo "Killing background functions..."
	if kill $COMPILEPID; then
		echo "Successfully stopped autocompiling loop"
	else
		echo "Expected to be able to kill autocompiling loop, but couldn't."
		echo "Something could be wrong."
	fi
	if kill $SEARCHPID; then
		echo "Successfully stopped forwardsearch loop"
	else
		echo "Expected to be able to kill autocompiling loop, but couldn't."
		echo "Something could be wrong."
	fi
	echo "Successfully closed all background loops, quitting"
	exit
}


#  Automatically compile INFILE whenever it changes
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

autocompile() {
	# Ensure variables have been set
	if [ -z "$COMPILECMD" ] || [ -z "$COMPILEPERIOD" ] || [ -z "$RELOADREADER" ] || [ -z "$ERRORCMD" ] || [ -z "$INFILE" ] || [ -z "$OUTFILE" ]; then
		echo "ERROR: autocompile() doesn't see all the needed variables, something is wrong.  Aborting."
		exit 1
	fi

	# if inotifywait is available, use that - otherwise, use md5 checking
	if which inotifywait >/dev/null; then 
		while [ -f "$INFILE" ]; do
			if eval $COMPILECMD > coordinatex_compile_output; then
				eval $RELOADREADER
				if [ -f coordinatex_error.tex ]; then
					rm coordinatex_error.tex 2>/dev/null
				fi
			else
				if [ -z $READERSHOWERROR ]; then
					echo '\documentclass{article}\usepackage{srcltx}\\begin{document}\\noindent' > coordinatex_error.tex
					sed -e 's,\\,\\textbackslash ,g' -e 's,$,\\\\,g' -e 's,\(\[\|\]\|<\|>\),\$&\$,g' coordinatex_compile_output >> coordinatex_error.tex
					echo '\n\end{document}' >> coordinatex_error.tex
					if eval $ERRORCMD 1>/dev/null; then
						#cp coordinatex_error.dvi $OUTFILE
						eval $RELOADREADER
					else
						if grep "^! LaTeX Error: File \`srcltx.sty' not found.\\\\.$" coordinatex_error.tex; then
							echo "ERROR: srcltx is set, but you don't have srcltx.sty
						fi
						echo "Error loading error ):"
					fi
				fi
			fi
			inotifywait "$INFILE" 1>/dev/null
		done
	else
		# While INFILE is available, keep checking if need to compile
		OLDMD5=""
		while [ -f "$INFILE" ]; do
			# check to see if file changed
			MD5=$(md5sum "$INFILE")
			if [ "$MD5" != "$OLDMD5" ]; then
				if eval $COMPILECMD > coordinatex_compile_output; then
					eval $RELOADREADER
					if [ -f coordinatex_error.tex ]; then
						rm coordinatex_error.tex 2>/dev/null
					fi
				else
					if [ -z $READERSHOWERROR ]; then
						echo '\documentclass{article}\usepackage{srcltx}\\begin{document}\\noindent' > coordinatex_error.tex
						sed -e 's,\\,\\textbackslash ,g' -e 's,$,\\\\,g' -e 's,\(\[\|\]\|<\|>\),\$&\$,g' coordinatex_compile_output >> coordinatex_error.tex
						echo '\n\end{document}' >> coordinatex_error.tex
						if eval $ERRORCMD 1>/dev/null; then
							#cp coordinatex_error.dvi $OUTFILE
							eval $RELOADREADER
						else
							echo "Error loading error ):"
						fi
					fi
				fi
				OLDMD5=$MD5
			fi
			sleep $COMPILEPERIOD
		done
	fi
}

#  Automatically poll for EDITOR cursor position and pass to READER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

forwardsearch() {
	# Ensure variables have been set
	if [ -z "$POLLEDITOR" ] || [ -z "$CALLREADER" ] || [ -z "$POLLPERIOD" ]; then
		echo "ERROR: forwardsearch() doesn't see all the needed variables, something is wrong.  Aborting."
		exit 1
	fi

	# Keep polling for cursor position
	OLDCURSORPOS=""
	while true; do
		if [ ! -f coordinatex_error.tex ]; then
			CURSORPOS=$(eval $POLLEDITOR)
			if [ "$CURSORPOS" != "$OLDCURSORPOS" ]; then
				eval $CALLREADER
				OLDCURSORPOS=$CURSORPOS
			fi
		fi
		sleep $POLLPERIOD
	done
}


#  Main execution starts here
# ==============================================================================

echo "Starting CoordinaTeX $VERSION"


#  Parse arguments
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

INFILE=""
OUTFILE=""
EDITOR=""
READER=""
VIMSERVER=""
READERSHOWERROR=""
while getopts ":hi:o:e:v:r:" OPT; do
	case "$OPT" in
		h | [?] ) print_help ;;
		i) INFILE="$OPTARG" ;;
		o) OUTFILE="$OPTARG" ;;
		e) EDITOR="$OPTARG" ;;
		r) READER="$OPTARG" ;;
		v) VIMSERVER="$OPTARG" ;;
		c) TEXCOMPILER="$OPTARG";;
		n) COMPILEPERIOD="$OPTARG";;
		p) POLLPERIOD="$OPTARG";;
		z) READERSHOWERROR=1;;
	esac
done


#  Ensure required arguments were met, or warn about guesses
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

#  Check for INFILE
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$INFILE" ]; then
	if [ $(ls | grep -v "^coordinatex_error[.]tex" | grep -c "[.]tex$" ) -eq 1 ]; then
		INFILE=$(ls | grep -v "^coordinatex_error[.]tex" | grep ".tex$")
		echo "WARNING: No infile specified, guessing $INFILE"
	else
		echo "ERROR: Must provide a TeX filename (to be edited and compiled)"
		exit 1
	fi
fi
if [ ! -f "$INFILE" ]; then
	echo "ERROR: Cannot find the file '$INFILE'"
	exit 1
fi

#  Check for OUTFILE
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$OUTFILE" ]; then
	OUTFILE=$(echo $INFILE | sed 's/\(.*\).tex$/\1/')".dvi"
	echo "WARNING: No outfile specified, guessing: $OUTFILE"
fi

#  Check for EDITOR
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$EDITOR" ]; then
	if ps cx | grep vim >/dev/null; then
		EDITOR=vim
	elif ps cx | grep emacs >/dev/null; then
		EDITOR=emacs
	elif ps cx | grep gedit >/dev/null; then
		EDITOR=gedit
	fi
	if [ -z "$EDITOR" ]; then
		echo "ERROR: No editor specified, cannot guess, aborting"
		exit 1
	else
		echo "WARNING: No editor specified, guessing: $EDITOR"
	fi
fi
SUPPORTEDEDITORS="vim"
OKAYEDITOR=""
for VAR in $SUPPORTEDEDITORS; do
	if [ "$VAR" = "$EDITOR" ]; then
		OKAYEDITOR=1
	fi
done
if [ -z $OKAYEDITOR ]; then
	echo "ERROR: The editor '$EDITOR' is not currently supported."
	echo "Please select another editor with the -e option"
	echo "Currently supported editors are: $SUPPORTEDEDITORS"
	exit 1
fi
if  [ -z "$VIMSERVER" ] && [ "$EDITOR" = "vim" ]; then
	if [ $(vim --serverlist | wc -l) -eq 1 ]; then
		VIMSERVER=$(vim --serverlist)
		echo "WARNING: No vim server specified, guessing: $VIMSERVER"
	else
		echo "ERROR: When using vim, must provide a vimserver name."
		echo "Could not guess the vim servername, aborting."
		echo "See vim's \":help clientserver\""
		exit 1
	fi
fi

#  Check for READER
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$READER" ]; then
	if ps cx | grep xdvi >/dev/null; then
		READER=xdvi
	elif ps cx | grep evince >/dev/null; then
		READER=evince
	fi
	if [ -z "$READER" ]; then
		echo "ERROR: No reader specified, cannot guess, aborting"
		exit 1
	else
		echo "WARNING: No reader specified, guessing: $READER"
	fi
fi
SUPPORTEDREADERS="xdvi"
OKAYREADER=""
for VAR in $SUPPORTEDREADERS; do
	if [ "$VAR" = "$READER" ]; then
		OKAYREADER=1
	fi
done
if [ -z $OKAYREADER ]; then
	echo "ERROR: The reader '$READER' is not currently supported."
	echo "Please select another reader with the -r option"
	echo "Currently supported readers are: $SUPPORTEDREADERS"
	exit 1
fi

#  Check for TEXCOMPILER
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$TEXCOMPILER" ]; then
	TEXCOMPILER="latex"
	echo "WARNING: No TeX compiler specified, defaulting to: $TEXCOMPILER"
fi

#  Check for COMPILEPERIOD
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$COMPILEPERIOD" ]; then
	COMPILEPERIOD="1"
	echo "WARNING: No delay between file change specified, defaulting to: $COMPILEPERIOD second(s)"
fi

#  Check for POLLPERIOD
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$POLLPILEPERIOD" ]; then
	POLLPERIOD=".2"
	echo "WARNING: No delay between cursor position polling specified, defaulting to: $POLLPERIOD second(s)"
fi

#  Set needed values to be evaluated in the loops
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

#  Set how to poll EDITOR for cursor position
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  

case "$EDITOR" in
	vim )
		POLLEDITOR='vim --servername "$VIMSERVER" --remote-expr '\''line(".").":".col(".")'\'
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
		;;
esac


#  Set how to inform EDITOR of reverse search
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

case "$EDITOR" in
	vim )
		CALLEDITOR="vim --servername \"$VIMSERVER\" --remote +$LINE $INFILE"
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
		;;
esac


#  Set how to inform READER of forward search
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

case "$READER" in
	xdvi )
		CALLREADER='xdvi -editor "$CALLEDITOR"  -sourceposition "$CURSORPOS $INFILE" "$OUTFILE"'
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
		;;
esac


#  Set how to tell READER to reload document
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

case "$READER" in
	xdvi )
		RELOADREADER='pkill -USR1 xdvi'
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
		;;
esac


#  Set command to compile TeX document
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

case "$TEXCOMPILER" in
	latex )
		COMPILECMD='latex -interaction=nonstopmode "$INFILE"'
		ERRORCMD='latex -jobname='$(echo $INFILE | sed 's/.tex$//g')' -interaction=nonstopmode coordinatex_error.tex'
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
		;;
esac

#  Main looping starts here
# ==============================================================================


# Don't want to close without cleaning up
trap quit HUP INT TERM

#  Start autocompile loop
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

autocompile &
COMPILEPID=$!

#  Start autocompile loop
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

forwardsearch &
SEARCHPID=$!

#  Wait for indication from user to quit
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

echo "Press ctrl-c to quit"
while true; do sleep 5s; done
quit
