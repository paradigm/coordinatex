#!/bin/sh

# Copyright 2011 Daniel Thau. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
#    2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY <COPYRIGHT HOLDER> ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
# EVENT SHALL <COPYRIGHT HOLDER> OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#  CoordinaTeX
# ==============================================================================

# CoordinaTeX is a script which will assist the creation of TeX documents in
# several fashions:
#
# 1) It will automatically compile the TeX document when it changes, and if the
# compilation is successful it will tell the reader to refresh the document.
# If your editor is set to update sufficiently often, the effect should be to
# get a somewhat live update of the TeX document as it is being created.
#
# 2) It will attempt to poll the text editor for the cursor position, and - if
# synctex or srctex is enabled - it will "forward-search"; that is, it will
# have the reader move to the appropriate part of the document.  If you are
# editing at the end of the document and jump to the beginning, the reader
# should also jump to the first page with you.
#
# 3) Where possible, it will attempt to support reverse-searches as well; that
# is, the reader can tell the editor to jump to a position.  If you tell the
# reader you want to reverse-search to the line that created the title
# information, the editor will jump to \maketitle.
#
# 4) Should a compilation error arise, CoordinaTeX will update the contents of
# the reader with the TeX error information (as far as I know, this feature is
# unique to CoordinaTeX).
#
# 5) If CoordinaTeX is not handed sufficient information directly, it will
# attempt to intelligently guess the missing options.  If only one ".tex"
# document appears in the directory CoordinaTeX is run in, only one ".pdf" or
# ".dvi" file exists in that directory, only one editor is running, and only
# one reader is running, CoordinaTeX will guess these options.
#
# Moreover, CoordinaTeX will attempt to do these things in a flexible,
# extendable manner; if a given editor, output format or reader is not
# supported it should be easy to add it. (Feel free to upstream the additions
# back!)
#
# Currently supported editors:
# - vim
# Currently supported TeX compilation options:
# - latex with srcltx to DVI
# Currently supported readers:
# - xdvi
#
# Eventually I'd like to add several more editors, readers and formats

VERSION="1.0a2"

#  Functions
# ==============================================================================


# Print help information and exit
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

print_help() {
	echo "CoordinaTeX $VERSION"
	echo ""
	echo "usage: coordinatex [arguments]"
	echo ""
	echo "Arguments"
	echo "  -h                      Print this dialogue"
	echo "  -i <filename>           Input TeX file"
	echo "  -o <filename>           Output PDF or DVI file"
	echo "  -e <editor>             Program to edit TeX file"
	echo "  -r <reader>             Program to view compiled DVI or PDF"
	echo "  -s <editor_server>      Editor server name, where appropriate"
	echo "  -v <reader_server>      Reader server name, where appropriate"
	echo "  -c <compiler>           Name of compiler to use - pdftex, latex, etc"
	echo "  -n inotify or <seconds> Time to wait between checking for need to compile"
	echo "  -p <seconds>            Time to wait between polling for editor cursor"
	echo "  -m synctex or srcltx    Method to do forward and/or reverse search"
	echo "  -z                      When compile error, do NOT print error in reader"
	echo ""
	echo "If a required argument is left out, CoordinaTeX may pick it up from an"
	echo "environmental variable (such as EDITOR) or try to guess the value by"
	echo "looking at the local files and processes."
	exit
}


#  Quit CoordinaTeX cleanly, killing backgrounded functions
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

quit() {
	echo "Killing background functions..."
	if [ -z $COMPILE_LOOP_PID ]; then
		echo "Compile loop should not be running, not killing."
	else
		if kill $COMPILE_LOOP_PID 2>/dev/null; then
			echo "Successfully stopped compile loop"
		else
			echo "Expected to be able to kill compile loop, but couldn't."
			echo "Something could be wrong."
		fi
	fi
	if [ -z $FORWARD_SEARCH_LOOP_PID ]; then
		echo "Forward search loop should not be running, not killing."
	else
		if kill $FORWARD_SEARCH_LOOP_PID 2>/dev/null; then
			echo "Successfully stopped forward search loop"
		else
			echo "Expected to be able to kill forward search loop, but couldn't."
			echo "Something could be wrong."
		fi
	fi
	if [ -f coordinatex_compile_output ]; then
		echo "Removing temporary compile output file..."
		rm coordinatex_compile_output
	fi
	if [ -f coordinatex_error.tex ]; then
		echo "Removing temporary compile error file..."
		rm coordinatex_error.tex
	fi
	echo "Finished cleaning up, exiting."
	exit 0
}


#  Automatically compile INPUT_FILE whenever it changes
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

compile_loop() {
	# Ensure variables have been set
	if [ -z "$COMPILE_CMD" ] || [ -z "$COMPILE_PERIOD" ] ||  [ -z "$SHOW_COMPILE_ERROR_CMD" ] || [ -z "$INPUT_FILE" ] || [ -z "$OUTPUT_FILE" ] || [ -z $COORDINATEX_PID ] || [ -z $SYNC_METHOD ]; then
		echo "ERROR: compile_loop() doesn't see all the needed variables, something is wrong.  Aborting."
		exit 1
	fi

	# Continuously check if need to compile
	OLD_MD5=""
	while true; do
		# check to see if the file changed
		MD5=$(md5sum "$INPUT_FILE" 2>/dev/null)
		if [ "$MD5" != "$OLD_MD5" ]; then
			if eval $COMPILE_CMD > coordinatex_compile_output; then
				eval $RELOAD_READER_CMD 2>/dev/null
				if [ -f coordinatex_error.tex ]; then
					rm coordinatex_error.tex 2>/dev/null
				fi
			else
				if [ -z $READER_DONT_SHOW_ERROR ]; then
					echo '\documentclass{article}\usepackage{fullpage}' > coordinatex_error.tex
					if [ "$SYNC_METHOD" = "srcltx" ]; then
						echo '\usepackage{srcltx}' >> coordinatex_error.tex
					fi
					echo '\\begin{document}\large\\noindent' >> coordinatex_error.tex
					sed -e 's,\\,\\textbackslash{},g' -e 's,$,\\\\,g' -e 's,\(\[\|\]\|<\|>\),\$&\$,g' coordinatex_compile_output >> coordinatex_error.tex
					echo '\n\end{document}' >> coordinatex_error.tex
					if eval $SHOW_COMPILE_ERROR_CMD 1>/dev/null; then
						eval $RELOAD_READER_CMD
					else
						echo "ERROR: Error creating error for reader to show"
					fi
				fi
			fi
		fi
		if [ "$COMPILE_PERIOD" = "inotify" ]; then
			inotifywait "$INPUT_FILE" 1>/dev/null 2>/dev/null
		else
			sleep $COMPILE_PERIOD
		fi
	done
	echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
	kill $COORDINATEX_PID
}

#  Automatically poll for EDITOR cursor position and pass to READER
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

forward_search_loop() {
	# Ensure variables have been set
	if [ -z "$FORWARD_SEARCH_POLL_EDITOR_CMD" ] || [ -z "$READER_FORWARD_SEARCH_CMD" ] || [ -z "$POLL_PERIOD" ] || [ -z "$COORDINATEX_PID" ]; then
		echo "ERROR: forward_search_loop() doesn't see all the needed variables, something is wrong.  Aborting."
		exit 1
	fi

	# Keep polling for cursor position
	OLD_CURSOR_POSITION=""
	while true; do
		if [ ! -f coordinatex_error.tex ]; then
			CURSOR_POSITION=$(eval $FORWARD_SEARCH_POLL_EDITOR_CMD)
			if [ "$CURSOR_POSITION" != "$OLD_CURSOR_POSITION" ]; then
				eval $READER_FORWARD_SEARCH_CMD 2>/dev/null
				OLD_CURSOR_POSITION=$CURSOR_POSITION
			fi
		fi
		sleep $POLL_PERIOD
	done
}


#  Main execution starts here
# ==============================================================================

echo "Starting CoordinaTeX $VERSION"


#  Clean up previous run, if necessary
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

if [ -f coordinatex_compile_output ]; then
	echo "Removing temporary compile output file..."
	rm coordinatex_compile_output
fi
if [ -f coordinatex_error.tex ]; then
	echo "Removing temporary compile error file..."
	rm coordinatex_error.tex
fi

#  Parse arguments
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

while getopts ":hi:o:e:r:v:c:n:p:z" OPT; do
	case "$OPT" in
		h | [?] ) print_help;;
		i) INPUT_FILE="$OPTARG";;
		o) OUTPUT_FILE="$OPTARG";;
		e) EDITOR="$OPTARG";;
		r) READER="$OPTARG";;
		s) EDITOR_SERVER="$OPTARG";;
		v) READER_SERVER="$OPTARG";;
		c) TEX_COMPILER="$OPTARG";;
		n) COMPILE_PERIOD="$OPTARG";;
		p) POLL_PERIOD="$OPTARG";;
		m) SYNC_METHOD="$OPTARG";;
		z) READER_DONT_SHOW_ERROR=1;;
	esac
done

#  Ensure required arguments were met, or warn about guesses
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


#  Check for INPUT_FILE
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$INPUT_FILE" ]; then
	if [ $(ls | grep -v "^coordinatex_error\.tex$" | grep -c "\.tex$") -eq 1 ]; then
		INPUT_FILE=$(ls | grep -v "^coordinatex_error\.tex$" | grep "\.tex$")
		echo "WARNING: No input file specified, guessing $INPUT_FILE"
	else
		echo "ERROR: No TeX filename specified, cannot guess, aborting."
		exit 1
	fi
fi
if [ ! -f "$INPUT_FILE" ]; then
	echo "ERROR: Can not find the file '$INPUT_FILE'"
fi

#  Check for OUTPUT_FILE
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$OUTPUT_FILENAME" ]; then
	if [ -z "$TEX_COMPILER" ]; then
		if [ $(ls -1 | grep -c "\.dvi$") -gt 0 ]  && [ $(ls -1 | grep -c "\.pdf$") -eq 0 ]; then
			TEX_COMPILER="latex"
			echo "WARNING: No TeX compiler specified, guessing: $TEX_COMPILER"
		elif [ $(ls -1 | grep -c "\.dvi$") -eq 0 ] && [ $(ls -1 | grep -c "\.pdf$") -gt 0 ]; then
			TEX_COMPILER="pdflatex"
			echo "WARNING: No TeX compiler specified, guessing: $TEX_COMPILER"
		else
			echo "ERROR: No TeX compiler or output filename given, cannot guess, aborting."
			exit 1
		fi
	fi
	if [ "$TEX_COMPILER" = "latex" ]; then
		OUTPUT_FILE=$(echo $INPUT_FILE | sed 's/\(.*\)[.]tex$/\1.dvi/')
		echo "WARNING: No output file specified, guessing $OUTPUT_FILE"
	elif [ "$TEX_COMPILER" = "pdflatex" ]; then
		OUTPUT_FILE=$(echo $INPUT_FILE | sed 's/\(.*\)[.]tex$/\1.pdf/')
		echo "WARNING: No output file specified, guessing $OUTPUT_FILE"
	else
		echo "ERROR: No output file specified, cannot guess, aborting."
		exit 1
	fi
fi

#  Check for TEX_COMPILER
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$TEX_COMPILER" ]; then
	echo "ERROR: No TeX compiler specified, cannot guess, aborting."
	exit 1
fi

#  Check for EDITOR
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$EDITOR" ]; then
	if ps cx | grep vim >/dev/null; then
		EDITOR=vim
	elif ps cx | grep emacs >/dev/null; then
		EDITOR=emacs
	elif ps cx | grep gedit >/dev/null; then
		EDITOR=gedit
	fi
	if [ -z "$EDITOR" ]; then
		echo "ERROR: No editor specified, cannot guess, aborting"
		exit 1
	else
		echo "WARNING: No editor specified, guessing: $EDITOR"
	fi
fi
SUPPORTED_EDITORS="vim"
OKAY_EDITOR=""
for VAR in $SUPPORTED_EDITORS; do
	if [ "$VAR" = "$EDITOR" ]; then
		OKAY_EDITOR=1
	fi
done
if [ -z $OKAY_EDITOR ]; then
	echo "ERROR: The editor '$EDITOR' is not currently supported."
	echo "Please select another editor with the -e option"
	echo "Currently supported editors are: $SUPPORTED_EDITORS"
	exit 1
fi
if  [ -z "$EDITOR_SERVER" ] && [ "$EDITOR" = "vim" ]; then
	if [ $(vim --serverlist | wc -l) -eq 1 ]; then
		EDITOR_SERVER=$(vim --serverlist)
		echo "WARNING: No vim server specified, guessing: $EDITOR_SERVER"
	else
		echo "WARNING: No vim server given, cannot guess; forward searching will be disabled"
		echo "See vim's \":help clientserver\""
	fi
fi

#  Check for READER
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$READER" ]; then
	if [ "$TEX_COMPILER" = "latex" ]; then
		if ps cx | grep xdvi >/dev/null; then
			READER=xdvi
			LAUNCH_READER=""
		elif which xdvi 1>/dev/null; then
			READER=xdvi
			LAUNCH_READER=1
		fi
	elif [ "$TEX_COMPILER" = "pdflatex" ]; then
		if ps cx | grep xpdf >/dev/null; then
			READER=xpdf
			LAUNCH_READER=""
		elif which xpdf 1>/dev/null; then
			READER=xpdf
			LAUNCH_READER=1
		fi
	else
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
	fi
	if [ -z "$READER" ]; then
		echo "ERROR: No reader specified, cannot guess, aborting"
		exit 1
	else
		echo "WARNING: No reader specified, guessing: $READER"
	fi
fi
SUPPORTED_READERS="xdvi xpdf"
OKAY_READER=""
for VAR in $SUPPORTED_READERS; do
	if [ "$VAR" = "$READER" ]; then
		OKAY_READER=1
	fi
done
if [ -z $OKAY_READER ]; then
	echo "ERROR: The reader '$READER' is not currently supported."
	echo "Please select another reader with the -r option"
	echo "Currently supported readers are: $SUPPORTED_READERS"
	exit 1
fi
if  [ -z "$READER_SERVER" ] && [ "$READER" = "xpdf" ]; then
	if [ $(ps ux | awk '$11=="xpdf" && $12=="-remote" {print $13}' | wc -l) -eq 1 ]; then
		READER_SERVER=$(ps ux | awk '$11=="xpdf" && $12=="-remote" {print $13}')
		echo "WARNING: No xpdf server specified, guessing: $READER_SERVER"
	else
		READER_SERVER="coordinatex"
		LAUNCH_READER=1
		echo "WARNING: No xpdf server given, defaulting to: $READER_SERVER"
		echo "See xpdf's man page, section \"REMOTE SERVER MODE\""
	fi
fi

#  Check for COMPILE_PERIOD
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$COMPILE_PERIOD" ]; then
	if which inotifywait >/dev/null; then
		COMPILE_PERIOD="inotify"
	else
		COMPILE_PERIOD="1"
	fi
	echo "WARNING: No delay between file change specified, defaulting to: $COMPILE_PERIOD"
fi

#  Check for POLL_PERIOD
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$POLL_PERIOD" ]; then
	POLL_PERIOD=".2"
	echo "WARNING: No delay between cursor position polling specified, defaulting to: $POLL_PERIOD"
fi

#  Check for SYNC_METHOD
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  
if [ -z "$SYNC_METHOD" ]; then
	SYNC_METHOD=$(awk '/^[^%]*\\usepackage{srcltx}/{SRCLTXLINE=NR}/^[^%]*\\begin{document}/{BEGINDOCLINE=NR}END{if(SRCLTXLINE!="" && SRCLTXLINE<BEGINDOCLINE){print "srcltx"}else{print "synctex"}}' $INPUT_FILE)
	echo "WARNING: No sync method specified, guessing: $SYNC_METHOD"
fi

#  Set needed values to be evaluated in the loops
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

#  Set how to poll EDITOR for cursor position
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  

case "$EDITOR" in
	vim )
		if [ -z $EDITOR_SERVER ]; then
			FORWARD_SEARCH_POLL_EDITOR_CMD=""
			echo "WARNING: Can't find prerequisites for forward-searching, it will be disabled"
		else
			FORWARD_SEARCH_POLL_EDITOR_CMD='vim --servername "$EDITOR_SERVER" --remote-expr '\''line(".").":".col(".")'\'
		fi
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
		;;
esac

#  Set how to inform EDITOR of reverse search
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  

case "$EDITOR" in
	vim )
		if [ -z $EDITOR_SERVER ]; then
			REVERSE_SEARCH_JUMP_CMD=""
			echo "WARNING: Can't find prerequisites for reverse-searching, it will be disabled"
		else
			REVERSE_SEARCH_JUMP_CMD="vim --servername \"$EDITOR_SERVER\" --remote +$LINE $INPUT_FILE"
		fi
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
		;;
esac

#  Set how to inform READER of forward search
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  

case "$READER" in
	xdvi )
		READER_FORWARD_SEARCH_CMD='xdvi'
		if [ ! -z "$REVERSE_SEARCH_JUMP_CMD" ]; then
			READER_FORWARD_SEARCH_CMD="$READER_FORWARD_SEARCH_CMD"' -editor "$REVERSE_SEARCH_JUMP_CMD"'
		fi
		READER_FORWARD_SEARCH_CMD="$READER_FORWARD_SEARCH_CMD"' -sourceposition "$CURSOR_POSITION $INPUT_FILE"'" $OUTPUT_FILE"
		if [ "$SYNC_METHOD" = "synctex" ]; then
			echo "WARNING: xdvi forward and reverse searches require srcltx, forward and reverse searching will be disabled."
			READER_FORWARD_SEARCH_CMD=""
		fi
		;;
	xpdf )
		READER_FORWARD_SEARCH_CMD='xpdf -remote $READER_SERVER $OUTPUT_FILE $(synctex view -i $CURSOR_POSITION:$INPUT_FILE -o $OUTPUT_FILE | awk -F: '"'"'/^Page:[0-9]/{print$2}'"')"
		if [ "$SYNC_METHOD" = "srcltx" ]; then
			echo "WARNING: xpdf forward search requires synctex, forward searching will be disabled."
			READER_FORWARD_SEARCH_CMD=""
		fi
		echo "WARNING: xpdf does not support reverse seaching, reverse searching will be disabled."
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here (READER_FORWARD_SEARCH_CMD).  Something is wrong.  Aborting."
		exit 1
		;;
esac

#  Set how to tell READER to reload document
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  

case "$READER" in
	xdvi )
		RELOAD_READER_CMD='pkill -USR1 xdvi'
		;;
	xpdf )
		RELOAD_READER_CMD='xpdf -remote $READER_SERVER $OUTPUT_FILE'
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here (READER_RELOAD_CMD).  Something is wrong.  Aborting."
		exit 1
		;;
esac

#  Set how to launch READER
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  

if [ ! -z $LAUNCH_READER ]; then
	case "$READER" in
		xdvi )
			LAUNCH_READER_CMD='xdvi'
			if [ ! -z "$REVERSE_SEARCH_JUMP_CMD" ]; then
				LAUNCH_READER_CMD="$LAUNCH_READER_CMD"' -editor "$REVERSE_SEARCH_JUMP_CMD"'
			fi
			if [ "$SYNC_METHOD" = "srcltx" ]; then
				LAUNCH_READER_CMD="$LAUNCH_READER_CMD"' -sourceposition "$CURSOR_POSITION $INPUT_FILE"'" $OUTPUT_FILE &"
			else
				LAUNCH_READER_CMD="$LAUNCH_READER_CMD $OUTPUT_FILE &"
			fi
			;;
		xpdf )
			LAUNCH_READER_CMD='xpdf -remote $READER_SERVER $OUTPUT_FILE &'
			;;
		* )
			echo "ERROR: Hmm, shouldn't get here (LAUNCH_READER_CMD).  Something is wrong.  Aborting."
			exit 1
			;;
	esac
else
	LAUNCH_READER_CMD=""
fi

#  Set command to compile TeX document
# .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  

case "$TEX_COMPILER" in
	latex )
		if [ "$SYNC_METHOD" = "srcltx" ]; then
			COMPILE_CMD='latex -interaction=nonstopmode "$INPUT_FILE"'
			if [ -z $READER_DONT_SHOW_ERROR ]; then
				SHOW_COMPILE_ERROR_CMD='latex -jobname='$(echo $INPUT_FILE | sed 's/[.]tex$//g')' -interaction=nonstopmode coordinatex_error.tex'
			fi
		elif [ "$SYNC_METHOD" = "synctex" ]; then
			COMPILE_CMD='latex -interaction=nonstopmode -synctex=1 "$INPUT_FILE"'
			if [ -z $READER_DONT_SHOW_ERROR ]; then
				SHOW_COMPILE_ERROR_CMD='latex -jobname='$(echo $INPUT_FILE | sed 's/[.]tex$//g')' -interaction=nonstopmode coordinatex_error.tex'
			fi
		fi
		;;
	pdflatex )
		if [ "$SYNC_METHOD" = "srcltx" ]; then
			COMPILE_CMD='pdflatex -interaction=nonstopmode "$INPUT_FILE"'
			if [ -z $READER_DONT_SHOW_ERROR ]; then
				SHOW_COMPILE_ERROR_CMD='pdflatex -jobname='$(echo $INPUT_FILE | sed 's/[.]tex$//g')' -interaction=nonstopmode coordinatex_error.tex'
			fi
		elif [ "$SYNC_METHOD" = "synctex" ]; then
			COMPILE_CMD='pdflatex -interaction=nonstopmode -synctex=1 "$INPUT_FILE"'
			if [ -z $READER_DONT_SHOW_ERROR ]; then
				SHOW_COMPILE_ERROR_CMD='pdflatex -jobname='$(echo $INPUT_FILE | sed 's/[.]tex$//g')' -interaction=nonstopmode coordinatex_error.tex'
			fi
		fi
		;;
	* )
		echo "ERROR: Hmm, shouldn't get here.  Something is wrong.  Aborting."
		exit 1
		;;
esac

#  Main looping starts here
# ==============================================================================

COORDINATEX_PID=$$

# Don't want to close without cleaning up
trap quit HUP INT TERM


#  Launch reader
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


if [ ! -z $LAUNCH_READER ]; then
	if [ ! -f $OUTPUT_FILE ]; then
		echo "Need to launch $READER but no $OUTPUT_FILE, compiling quick temp file..."
		echo '\documentclass{article}\\begin{document}\large\\noindent Temp coordinatex file, should disappear once '$INPUT_FILE' compiles the first time\end{document}' > coordinatex_error.tex
		eval $COMPILE_CMD 2>/dev/null
		rm coordinatex_error.tex
	fi
	echo $LAUNCH_READER_CMD
	eval $LAUNCH_READER_CMD 2>/dev/null
	# If launching a new reader, give it a couple seconds to launch before starting other loops
	echo "Giving $READER a couple seconds to launch..."
	sleep 2s
fi

#  Start compile loop
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

if [ -z "$COMPILE_CMD" ] || [ -z "$COMPILE_PERIOD" ] || [ -z "$SHOW_COMPILE_ERROR_CMD" ] || [ -z "$INPUT_FILE" ] || [ -z "$OUTPUT_FILE" ] || [ -z $COORDINATEX_PID ] || [ -z $SYNC_METHOD ]; then
	COMPILE_LOOP_PID=""
	echo "Compile loop is DISABLED."
else
	echo "Starting compile loop."
	compile_loop &
	COMPILE_LOOP_PID=$!
fi

#  Start forward search loop
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

if [ -z "$READER_FORWARD_SEARCH_CMD" ] || [ -z "$FORWARD_SEARCH_POLL_EDITOR_CMD" ] || [ -z "$REVERSE_SEARCH_JUMP_CMD" ] || [ -z "$POLL_PERIOD" ] || [ -z "$COORDINATEX_PID" ]; then
	# Do NOT start search loop
	FORWARD_SEARCH_LOOP_PID=""
	echo "Forward search loop is DISABLED."
else
	# Start search loop
	echo "Starting forward search."
	forward_search_loop &
	FORWARD_SEARCH_LOOP_PID=$!
fi

#  Wait for indication from user to quit
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

echo "Press ctrl-c to quit"
while true; do sleep 5s; done
quit
